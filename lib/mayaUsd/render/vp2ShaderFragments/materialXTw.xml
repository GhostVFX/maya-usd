<fragment uiName="materialXTw" name="materialXTw" type="interpolant" class="ShadeFragment" version="1.0" feature_level="0" >
    <description>
        <![CDATA[Generating world tangents in the vertex shader]]>
    </description>
    <properties>
        <float3   name="Nw"        semantic="NORMAL"    flags="varyingInputParam" />
    </properties>
    <outputs>
        <float3 name="Tw" />
    </outputs>
    <implementation>
        <implementation render="OGSRenderer" language="Cg" lang_version="2.100000" >
            <function_name val="materialXTw" />
            <vertex_source>
                <![CDATA[
float3 imaterialXTw(float3 Nw)
{
    // TODO: This is completely arbitrary. Requires at least a UV channel to compute anything better
    //       at the fragment or geometry shader level. USD will not provide tangent information.
    float3 tw = cross(Nw, float3(0.0, 0.0, 1.0));
    if (length(tw) < 1e-5) {
        tw = cross(Nw, float3(1.0, 0.0, 0.0));
    }
    return tw;
}
                ]]>
            </vertex_source>
            <source>
                <![CDATA[
float3 materialXTw(float3 iTw)
{
    return normalize(iTw);
}
                ]]>
            </source>
        </implementation>
        <implementation render="OGSRenderer" language="GLSL" lang_version="3.000000" >
            <function_name val="materialXTw" />
            <vertex_source>
                <![CDATA[
vec3 imaterialXTw(vec3 Nw)
{
    // TODO: This is completely arbitrary. Requires at least a UV channel to compute anything better
    //       at the fragment or geometry shader level. USD will not provide tangent information.
    vec3 tw = cross(Nw, vec3(0.0, 0.0, 1.0));
    if (length(tw) < 1e-5) {
        tw = cross(Nw, vec3(1.0, 0.0, 0.0));
    }
    return tw;
}
                ]]>
            </vertex_source>
            <source>
                <![CDATA[
vec3 materialXTw(vec3 iTw)
{
    return normalize(iTw);
}
                ]]>
            </source>
        </implementation>
        <implementation render="OGSRenderer" language="HLSL" lang_version="11.000000" >
            <function_name val="materialXTw" />
            <vertex_source>
                <![CDATA[
float3 imaterialXTw(float3 Nw)
{
    // TODO: This is completely arbitrary. Requires at least a UV channel to compute anything better
    //       at the fragment or geometry shader level. USD will not provide tangent information.
    float3 tw = cross(Nw, float3(0.0, 0.0, 1.0));
    if (length(tw) < 1e-5) {
        tw = cross(Nw, float3(1.0, 0.0, 0.0));
    }
    return tw;
}
                ]]>
            </vertex_source>
            <source>
                <![CDATA[
float3 materialXTw(float3 iTw)
{
    return normalize(iTw);
}
                ]]>
            </source>
        </implementation>
    </implementation>
</fragment>

